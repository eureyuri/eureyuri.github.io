{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/algorithmic-trading","result":{"data":{"contentfulBlog":{"title":"Algorithmic Trading","description":{"description":"About algo trading using Python and Alpaca API."},"slug":"algorithmic-trading","body":{"childMarkdownRemark":{"html":"<h2>Intro to Algorithmic Trading</h2>\n<p>Hi, so this time I'm going to write about algorithmic trading.\nFirstly, I must say that I have no experience in trading or finance and I will be writing from a beginner's perspective.\nMy motive for starting was because my current house mate does stock trading and I wanted to checkout how this actually works / how hard it is. Then, I thought that rather than doing this manually, I should automating this task as an engineer. So here we go... (and I hope that I don't lose money haha)\n<strong>This blog post will be updating periodically as I learn about the topic</strong></p>\n<h2>API and Library that we'll use</h2>\n<ul>\n<li>Alpaca <a href=\"https://alpaca.markets/\">https://alpaca.markets/</a></li>\n<li>beautifulsoup4 <a href=\"https://pypi.org/project/beautifulsoup4/\">https://pypi.org/project/beautifulsoup4/</a></li>\n</ul>\n<h2>Virtual environment and installing packages</h2>\n<ul>\n<li>Create virtual environment\n<code class=\"language-text\">virtualenv trading</code></li>\n<li>Activate virtual environment\n<code class=\"language-text\">source trading/bin/activate</code>\n<code class=\"language-text\">workon trading</code></li>\n<li>Install packages\n<code class=\"language-text\">pip install beautifulsoup4</code>\n<code class=\"language-text\">pip install alpaca-trade-api</code>\n<code class=\"language-text\">pip install lxml</code></li>\n</ul>\n<h2>Basic structure</h2>\n<ol>\n<li>Get S&#x26;P 500 by scraping</li>\n<li>Connect to Alpaca + basic structure</li>\n<li>Some kind of trading strategy </li>\n<li>\n<p>Trade</p>\n<ul>\n<li>We will first backtest / paper test on historical data and see how good our strategy is\n-Then we will then trade in live</li>\n</ul>\n</li>\n</ol>\n<h2>Get S&#x26;P 500</h2>\n<ul>\n<li>We'll use the Beautifulsoup library here to do some web scraping from wikipedia</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get500</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://en.wikipedia.org/wiki/List_of_S%26P_500_companies'</span><span class=\"token punctuation\">)</span>\n    soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span>\n    table <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wikitable sortable'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    companies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> table<span class=\"token punctuation\">.</span>findAll<span class=\"token punctuation\">(</span><span class=\"token string\">'tr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        company <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>findAll<span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text\n        companies<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Remove carriage return</span>\n    companies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> companies<span class=\"token punctuation\">]</span>\n    df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Connect to Alpaca + Basic structure</h2>\n<ul>\n<li>Now we'll connect to our trading api Alpaca</li>\n<li>We will also implement our basic structure (You will need to replace the key<em>id and secret</em>key with your own. This can be found in your Alpaca account)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> alpaca_trade_api <span class=\"token keyword\">as</span> tradeapi\n<span class=\"token keyword\">import</span> s_and_p <span class=\"token keyword\">as</span> sp\n<span class=\"token keyword\">import</span> time\n\nalpaca <span class=\"token operator\">=</span> tradeapi<span class=\"token punctuation\">.</span>REST<span class=\"token punctuation\">(</span>\n    key_id<span class=\"token operator\">=</span><span class=\"token string\">'YOUR_KEY_ID'</span><span class=\"token punctuation\">,</span>\n    secret_key<span class=\"token operator\">=</span><span class=\"token string\">'YOUR_SECRET_KEY'</span><span class=\"token punctuation\">,</span>\n    base_url<span class=\"token operator\">=</span><span class=\"token string\">'https://paper-api.alpaca.markets'</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start trading...\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        clock <span class=\"token operator\">=</span> alpaca<span class=\"token punctuation\">.</span>get_clock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        now <span class=\"token operator\">=</span> clock<span class=\"token punctuation\">.</span>timestamp\n        <span class=\"token keyword\">if</span> clock<span class=\"token punctuation\">.</span>is_open<span class=\"token punctuation\">:</span>\n            price_df <span class=\"token operator\">=</span> get_prices<span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">.</span>get500<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># TODO</span>\n            orders <span class=\"token operator\">=</span> get_orders<span class=\"token punctuation\">(</span>alpaca<span class=\"token punctuation\">,</span> price_df<span class=\"token punctuation\">)</span> <span class=\"token comment\"># TODO</span>\n            trade<span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">)</span> <span class=\"token comment\"># TODO</span>\n\n            done <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished at: \"</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span>\n\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rerunning...'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Getting prices</h3>\n<ul>\n<li>We get prices using Alpaca</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> pytz <span class=\"token keyword\">import</span> timezone\n<span class=\"token keyword\">import</span> time\n\neasterntz <span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">(</span><span class=\"token string\">'US/Eastern'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_get_prices</span><span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">,</span> max_workers<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_barset</span><span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> alpaca<span class=\"token punctuation\">.</span>get_barset<span class=\"token punctuation\">(</span>\n            companies<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'day'</span><span class=\"token punctuation\">,</span>\n            limit<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n            start<span class=\"token operator\">=</span>start_dt<span class=\"token punctuation\">,</span>\n            end<span class=\"token operator\">=</span>now\n        <span class=\"token punctuation\">)</span>\n\n    start_dt <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> pd<span class=\"token punctuation\">.</span>Timedelta<span class=\"token punctuation\">(</span><span class=\"token string\">'50 days'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Max number of symbols we can request at once is 200</span>\n    barset <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> idx <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> barset <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            barset <span class=\"token operator\">=</span> get_barset<span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            barset<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>get_barset<span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span>idx<span class=\"token operator\">+</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        idx <span class=\"token operator\">+=</span> <span class=\"token number\">200</span>\n\n    <span class=\"token keyword\">return</span> barset<span class=\"token punctuation\">.</span>df\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_prices</span><span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    now <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span>tz<span class=\"token operator\">=</span>easterntz<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> _get_prices<span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Getting orders</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_orders</span><span class=\"token punctuation\">(</span>alpaca<span class=\"token punctuation\">,</span> price_df<span class=\"token punctuation\">,</span> position_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> max_positions<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># rank the stocks based on the indicators.</span>\n    ranked <span class=\"token operator\">=</span> calc_scores<span class=\"token punctuation\">(</span>price_df<span class=\"token punctuation\">)</span>\n    to_buy <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    to_sell <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    account <span class=\"token operator\">=</span> alpaca<span class=\"token punctuation\">.</span>get_account<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># take the top one twentieth out of ranking,</span>\n    <span class=\"token comment\"># excluding stocks too expensive to buy a share</span>\n    <span class=\"token keyword\">for</span> symbol<span class=\"token punctuation\">,</span> _ <span class=\"token keyword\">in</span> ranked<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ranked<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        price <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>price_df<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> price <span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>cash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        to_buy<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span>\n\n    positions <span class=\"token operator\">=</span> alpaca<span class=\"token punctuation\">.</span>list_positions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Lists currently open trades</span>\n    holdings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">:</span> p <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> positions<span class=\"token punctuation\">}</span>\n    holding_symbol <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>holdings<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    to_sell <span class=\"token operator\">=</span> holding_symbol <span class=\"token operator\">-</span> to_buy\n    to_buy <span class=\"token operator\">=</span> to_buy <span class=\"token operator\">-</span> holding_symbol\n    orders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># if a stock is in the portfolio, and not in the desired portfolio, sell it</span>\n    <span class=\"token keyword\">for</span> symbol <span class=\"token keyword\">in</span> to_sell<span class=\"token punctuation\">:</span>\n        shares <span class=\"token operator\">=</span> holdings<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>qty\n        orders<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">:</span> symbol<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'qty'</span><span class=\"token punctuation\">:</span> shares<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'side'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sell'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If the portfolio is missing stocks from the</span>\n    <span class=\"token comment\"># desired portfolio, buy them. We sent a limit for the total</span>\n    <span class=\"token comment\"># position size so that we don't end up holding too many positions.</span>\n    max_to_buy <span class=\"token operator\">=</span> max_positions <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>positions<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>to_sell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> symbol <span class=\"token keyword\">in</span> to_buy<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> max_to_buy <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        shares <span class=\"token operator\">=</span> position_size <span class=\"token operator\">//</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>price_df<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> shares <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        orders<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'symbol'</span><span class=\"token punctuation\">:</span> symbol<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'qty'</span><span class=\"token punctuation\">:</span> shares<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'side'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        max_to_buy <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> orders</code></pre></div>\n<h2>Trading Strategy</h2>\n<ul>\n<li>This is where we implement the calc_scores function</li>\n</ul>\n<h3>Common Indicators to detect trends</h3>\n<ul>\n<li>Moving averages</li>\n<li>Exponential Moving Average (EMA)</li>\n<li>Relative Strength Index</li>\n<li>Balance Volume</li>\n</ul>\n<h3>Attempt 1: Rank stocks by sharpest decrease in EMA</h3>\n<ul>\n<li>Reference: <a href=\"https://www.youtube.com/watch?v=fVl1ld58xxo\">https://www.youtube.com/watch?v=fVl1ld58xxo</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">calc_scores</span><span class=\"token punctuation\">(</span>price_df<span class=\"token punctuation\">,</span> dayindex<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    diffs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    param <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">for</span> symbol <span class=\"token keyword\">in</span> price_df<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">.</span>levels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        df <span class=\"token operator\">=</span> price_df<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> param<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        ema <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">.</span>ewm<span class=\"token punctuation\">(</span>span<span class=\"token operator\">=</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>dayindex<span class=\"token punctuation\">]</span>\n        last <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>dayindex<span class=\"token punctuation\">]</span>\n        diff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">-</span> ema<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> last\n        diffs<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diff\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>diffs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Evaluation</h4>\n<ul>\n<li>Pretty bad. My equity went down most of the time and I only gained once in maybe twenty trades.</li>\n</ul>\n<h3>Attempt 2:</h3>\n<h2>Trade</h2>\n<ul>\n<li>Need to wait since if buys happen before sell orders are filled, they are bounced.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">trade</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sells <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>o <span class=\"token keyword\">for</span> o <span class=\"token keyword\">in</span> orders <span class=\"token keyword\">if</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'side'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'sell'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> order <span class=\"token keyword\">in</span> sells<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            alpaca<span class=\"token punctuation\">.</span>submit_order<span class=\"token punctuation\">(</span>\n                symbol<span class=\"token operator\">=</span>order<span class=\"token punctuation\">[</span><span class=\"token string\">'symbol'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                qty<span class=\"token operator\">=</span>order<span class=\"token punctuation\">[</span><span class=\"token string\">'qty'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                side<span class=\"token operator\">=</span><span class=\"token string\">'sell'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">'market'</span><span class=\"token punctuation\">,</span>\n                time_in_force<span class=\"token operator\">=</span><span class=\"token string\">'day'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> wait\n    <span class=\"token keyword\">while</span> count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        pending <span class=\"token operator\">=</span> alpaca<span class=\"token punctuation\">.</span>list_orders<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pending<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    buys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>o <span class=\"token keyword\">for</span> o <span class=\"token keyword\">in</span> orders <span class=\"token keyword\">if</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'side'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'buy'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> order <span class=\"token keyword\">in</span> buys<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            alpaca<span class=\"token punctuation\">.</span>submit_order<span class=\"token punctuation\">(</span>\n                symbol<span class=\"token operator\">=</span>order<span class=\"token punctuation\">[</span><span class=\"token string\">'symbol'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                qty<span class=\"token operator\">=</span>order<span class=\"token punctuation\">[</span><span class=\"token string\">'qty'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                side<span class=\"token operator\">=</span><span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">'market'</span><span class=\"token punctuation\">,</span>\n                time_in_force<span class=\"token operator\">=</span><span class=\"token string\">'day'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n    count <span class=\"token operator\">=</span> wait\n    <span class=\"token keyword\">while</span> count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        pending <span class=\"token operator\">=</span> alpaca<span class=\"token punctuation\">.</span>list_orders<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pending<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></code></pre></div>\n<h2>Live Trading</h2>"}},"heroImage":{"file":{"url":"//images.ctfassets.net/t1i3p2wynjf8/1JBxnKDMAUxCclBTxWNQAw/b54e7eeb66819bc14b4921e04f293907/chart-trading-courses-forex-analysis-shares-stock-exchange.jpg"}}}},"pageContext":{"slug":"algorithmic-trading"}},"staticQueryHashes":[]}