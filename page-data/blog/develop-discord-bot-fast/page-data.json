{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/develop-discord-bot-fast","result":{"data":{"contentfulBlog":{"title":"爆速でDiscord Bot開発","description":{"description":"Pythonとrepl.itを使って無料でDiscord Botを運用してみた。開発手順の解説とRepl.it、Uptime Robotの紹介。"},"slug":"develop-discord-bot-fast","body":{"childMarkdownRemark":{"html":"<h2>Pythonとrepl.itを使って無料でDiscord Botを運用してみた  ~💩をつけまくってみる~</h2>\n<p>本記事は<a href=\"https://qiita.com/eureyuri/items/c5f041773c93a54b9f92\">Qiita</a>にて公開されております。</p>\n<h2>経緯</h2>\n<p>最近<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%83%88%E3%83%BC%E3%82%AFRPG\">TRPG</a>をDiscord上でやっているからか、かなりの頻度でDiscordでチャットをするようになりました。\nそこで今回は、チャット内で多発する「うんこ」に自動的にうんこの絵文字を付けるようなBOTを開発しました。\n今回のようにあまり難しいBotでなければ小一時間（経験なし）で実際に運用できることが分かりました。\n是非みなさんも僕のように生活を豊かにする（意味のない）BOT開発を楽しみましょう！</p>\n<p><strong>こちらの記事では、Pythonの基礎知識がある方を対象に書いています。</strong>\n<strong>また、「うんこ」という言葉が数え切れないほど出てきますが、ご容赦ください。</strong></p>\n<h3>実際に開発したもの</h3>\n<p><a href=\"https://discord.com/oauth2/authorize?client_id=725701481172303973&#x26;permissions=2112&#x26;scope=bot\">UnkoMan</a>\n<img width=\"152\" alt=\"スクリーンショット 2020-06-25 23.12.54.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/b1c2e397-22f7-5d52-f433-01c2bd59c2dd.png\">\n<img width=\"451\" alt=\"スクリーンショット 2020-06-25 23.13.19.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/ccaf0187-a54e-19ad-3144-ac67dcbfca8b.png\"></p>\n<h2>開発環境</h2>\n<ul>\n<li>\n<p><a href=\"https://repl.it/\">Repl.it</a></p>\n<ul>\n<li>Python 3.8</li>\n<li>discord.py 1.3.3</li>\n<li>Flask 1.1.2</li>\n</ul>\n</li>\n<li><a href=\"https://uptimerobot.com/\">Uptime Robot</a></li>\n</ul>\n<h3>Repl.it について</h3>\n<ul>\n<li>オンラインコーディングプラットフォームです</li>\n<li>ブラウザに表示されたIDEからコードを実行できます</li>\n<li>ウェブ上でアプリやウェブサイトの開発ができます</li>\n</ul>\n<h3>Uptime Robot について</h3>\n<ul>\n<li>ネットワークを（50まで）無料で監視できるサービス</li>\n</ul>\n<h2>Botアカウントの作成</h2>\n<ol>\n<li><a href=\"https://discord.com/developers/applications/\">Discord Developer Portal</a>へアクセスしてDiscordのアカウントを使ってログインします</li>\n<li>\n<p><code class=\"language-text\">New Application</code>ボタンを押して、名前を付けてください</p>\n<ul>\n<li>私の場合は<code class=\"language-text\">Unko</code>としました\n<img width=\"1422\" alt=\"スクリーンショット 2020-06-25 22.27.56.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/916c56a5-ae79-df4f-5c1c-62124b2acfd9.png\"></li>\n</ul>\n</li>\n<li>作成したApplicationの中に入り、<code class=\"language-text\">Bot</code>のタブに入ります。</li>\n<li>\n<p><code class=\"language-text\">Add Bot</code>ボタンを押します</p>\n<ul>\n<li>Botが作成された後にBotの<code class=\"language-text\">Username</code>を変更することができます</li>\n<li>私はここで<strong><code class=\"language-text\">UnkoMan</code></strong>という名前を授けました。 (<code class=\"language-text\">Save Changes</code>を押すのを忘れないように)</li>\n<li>ここでプロファイル写真の変更も可能です</li>\n<li><code class=\"language-text\">PUBLIC BOT</code>がオンになっているのを確認します</li>\n<li><code class=\"language-text\">TOKEN</code>をコピーしておきます\n<img width=\"1396\" alt=\"スクリーンショット 2020-06-25 22.31.54.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/fccad285-452c-b2a9-5c80-8d3e7c6392dd.png\"></li>\n</ul>\n</li>\n<li><code class=\"language-text\">Guild</code>（discord APIではGuild == Serverらしい）を作成します。Discord内（アプリの方）で\"+\"ボタンを押してサーバーを作成します\n<img width=\"533\" alt=\"スクリーンショット 2020-06-25 22.33.07.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/28f5e655-24bb-acc1-b692-9b535191c4a0.png\"></li>\n<li>\n<p>Botをサーバーへ登録します</p>\n<ul>\n<li><code class=\"language-text\">OAuth2</code>のタブに入り<code class=\"language-text\">SCOPES</code>内の<code class=\"language-text\">bot</code>をチェックします</li>\n<li>\n<img width=\"1362\" alt=\"スクリーンショット 2020-06-25 22.37.20.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/6920750e-b028-3a74-66eb-2603ee79348a.png\">\n</li>\n<li>\n<p>下にある<code class=\"language-text\">BOT PERMISSIONS</code>からBOTの必要な権限もチェックします</p>\n<ul>\n<li>今回はテキストに対する権限だけが必要なので<code class=\"language-text\">Send Messages</code>と<code class=\"language-text\">Add Reactions</code>のみをチェックしました\n<img width=\"1037\" alt=\"スクリーンショット 2020-06-25 22.37.48.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/81dec9c3-debe-c0ba-9934-5b9050d603b2.png\"></li>\n</ul>\n</li>\n<li>\n<p>すると認証URLが生成されるので、コピーしてブラウザで開きます</p>\n<ul>\n<li>ちなみに他の人が保有しているサーバーにBotを追加したい場合もこの認証URLを使います</li>\n</ul>\n</li>\n<li>先ほど作成したサーバーを選択して認証ボタンを押します\n<img width=\"378\" alt=\"スクリーンショット 2020-06-25 22.39.03.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/810435d3-fc16-7fb3-d584-cf4e838b121b.png\"></li>\n</ul>\n</li>\n<li>Botが自分のサーバーにいることを確認！\n<img width=\"208\" alt=\"スクリーンショット 2020-06-25 22.41.01.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/58117c2c-4380-0539-7b47-bedd3e19c721.png\"></li>\n</ol>\n<h2>ウェブサーバー</h2>\n<ol>\n<li>Repl.itに行き、Python replを作成します</li>\n<li>\n<p><code class=\"language-text\">Package</code>タブを開きdependencyをインストールしていきます。下記を検索してインストールしてください</p>\n<ul>\n<li>discord.py</li>\n<li>Flask</li>\n</ul>\n</li>\n</ol>\n<img width=\"264\" alt=\"スクリーンショット 2020-06-25 22.42.53.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/17e1c566-742d-4e0f-1e8b-395290dda334.png\">\n<ol start=\"3\">\n<li><code class=\"language-text\">server.py</code>という新規ファイルを作成します</li>\n</ol>\n<img width=\"258\" alt=\"スクリーンショット 2020-06-25 22.43.47.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/435d90b5-7b3a-f4ff-fda0-42574fbab1b4.png\">\n<ul>\n<li>FlaskとThreadを使ってサーバーを作ります</li>\n<li>後でサーバーをUptime robotにpingしてもらいます</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"UnkoMan is alive!\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">keep_alive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run<span class=\"token punctuation\">)</span>\n  t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Bot</h2>\n<ol>\n<li><code class=\"language-text\">.env</code>ファイルを作成します</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dot\"><pre class=\"language-dot\"><code class=\"language-dot\">TOKEN=先ほどコピーしておいたTOKEN</code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">main.py</code>にどのようなBotにしたいかを書きます。以下コードにコメントを付けて説明します</li>\n</ol>\n<h4>仕様</h4>\n<ul>\n<li><code class=\"language-text\">UNNKO_LIST</code>に入っている言葉にうんこの絵文字を付ける</li>\n<li>メンション（または、”お腹すいた”と言われたら）されたら、何かしらの返事をする</li>\n<li>新しい人が入ってきたときに自己紹介をする</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> discord\n<span class=\"token keyword\">from</span> server <span class=\"token keyword\">import</span> keep_alive\n\n<span class=\"token comment\"># うんこに関する言葉のリスト</span>\nUNKO_LIST <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"うん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"うんこ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poop\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"うんち\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unnko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"くそ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"クソ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"糞\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"大便\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"排泄物\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ばば\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"糞便\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"crap\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"feces\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"manure\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shit\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># .envからTOKENを取ってくる</span>\nTOKEN <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 接続するためのオブジェクト</span>\nclient <span class=\"token operator\">=</span> discord<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 起動時にログする</span>\n<span class=\"token comment\"># @デコレーターを使ってイベントをハンドルします</span>\n<span class=\"token decorator annotation punctuation\">@client<span class=\"token punctuation\">.</span>event</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnkoMan is here'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@client<span class=\"token punctuation\">.</span>event</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    message<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># メッセージの送信者がBot自身だった場合は無視</span>\n    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">.</span>author <span class=\"token operator\">==</span> client<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    <span class=\"token comment\"># メンションされたら返信</span>\n    <span class=\"token keyword\">if</span> client<span class=\"token punctuation\">.</span>user <span class=\"token keyword\">in</span> message<span class=\"token punctuation\">.</span>mentions<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> reply_unko<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># メッセージ自体または、メッセージの中にうんこ（うん以外）が入ってたら、うんこの絵文字</span>\n    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">.</span>content <span class=\"token keyword\">in</span> UNKO_LIST <span class=\"token keyword\">or</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">in</span> message<span class=\"token punctuation\">.</span>content <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> UNKO_LIST<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> react_unko<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 隠しコマンド：お腹すいたら、特別メッセージを送るよ</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"お腹すいた\"</span> <span class=\"token keyword\">in</span> message<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> reply_unko<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"お腹すいた\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">reply_unko</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> special<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> special <span class=\"token operator\">==</span> <span class=\"token string\">\"お腹すいた\"</span><span class=\"token punctuation\">:</span>\n        reply <span class=\"token operator\">=</span> <span class=\"token string\">\"とりあえずうんこでも食っておけ（辛辣）\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        reply <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>mention<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 呼んだ？え？うんこ？あーそれは一理あるね'</span></span>\n\n    <span class=\"token comment\"># メッセージの送信と送信したメッセージにうんこを</span>\n    sent_msg <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> message<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> react_unko<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> react_unko<span class=\"token punctuation\">(</span>sent_msg<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># うんこの絵文字をメッセージに付ける</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">react_unko</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> message<span class=\"token punctuation\">.</span>add_reaction<span class=\"token punctuation\">(</span><span class=\"token string\">\"💩\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 新しい人が入ってきたとき</span>\n<span class=\"token decorator annotation punctuation\">@client<span class=\"token punctuation\">.</span>event</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_member_join</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># guildはdiscord内のserverのこと</span>\n    <span class=\"token keyword\">for</span> channel <span class=\"token keyword\">in</span> member<span class=\"token punctuation\">.</span>guild<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># generalチャンネルでの自己紹介</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"general\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">await</span> channel<span class=\"token punctuation\">.</span>send_message<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"初めまして </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>member<span class=\"token punctuation\">.</span>mention<span class=\"token punctuation\">}</span></span><span class=\"token string\">さん　うんこマンです！\"\"\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ウェブサーバーを起動する</span>\nkeep_alive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Discordへ接続</span>\nclient<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>TOKEN<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Repl.it内の<code class=\"language-text\">run</code>ボタンを押して実行！</strong></p>\n<p>これでDiscord上のサーバーであなたのBotが動いているはずです！</p>\n<p>気をつけなければいけないのは、repl.itではアクティビティがない状況が１時間続くとreplがオフラインになるとこです。\n対策としてUptime Robotを使いBotを<strong>365日24時間</strong>稼働させる方法を説明します</p>\n<h2>Uptime Robot</h2>\n<ol>\n<li>Uptime Robotにてアカウントを作成します</li>\n<li><code class=\"language-text\">+ Add New Monitor</code>ボタンを押します\n<img width=\"956\" alt=\"スクリーンショット 2020-06-25 22.47.38.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/a8f41f0a-149e-089b-6de0-fef863f3c65d.png\"></li>\n<li>\n<p><code class=\"language-text\">Monitor Type</code>を<code class=\"language-text\">HTTP(S)</code>、<code class=\"language-text\">Friendly Name</code>に好きな名前、<code class=\"language-text\">URL</code>をrepl.itで表示されていたものに、<code class=\"language-text\">Monitoring Interval</code>を<code class=\"language-text\">every 30 minutes</code>に設定してreplがオフラインにならないように設定します</p>\n<ul>\n<li>エラーが起きたときように<code class=\"language-text\">Alert Contacts To Notify</code>をチェックしておきます</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Create Monitor</code>ボタンを押して<strong>完成</strong>です！\n<img width=\"850\" alt=\"スクリーンショット 2020-06-25 22.50.01.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/581320/85b82800-ab87-b5f1-ee17-7c8b4b42f772.png\"></li>\n</ol>\n<h3>　追記</h3>\n<ul>\n<li>\"Repl it being just another host, won't be able to host it 24/7 so it will have a downtime of a few minutes within every 24 hours\"　なので365日24時間は稼働できないようです。24時間中数分はダウンタイムがあるようですが、この際目を瞑りましょう...</li>\n</ul>\n<h2>終わりに</h2>\n<p>いかがでしたでしょうか？納得のいくBotが作れましたか？\nもし、より機能を充実させてたいのであれば、<a href=\"https://discordpy.readthedocs.io/en/latest/\">ドキュメント</a>を読むことをお勧めします。</p>\n<p>関連記事にQiitaの記事を載せているのですが、どうやら<a href=\"heroku.com\">Heroku</a>でもBotなら無料でホスティングができるようです。Herokuは、ウェブアプリでの開発でしか使ったことがなかったので、勘違いをしていましたが、どうやら<a href=\"https://qiita.com/1ntegrale9/items/9d570ef8175cf178468f#dynos%E3%82%92on%E3%81%AB%E3%81%99%E3%82%8B\">\"Heroku の無料プランでは30分動作しないWebアプリケーションはスリープしますが、 紹介した手順ではwebプロセスを使用していないため、問題なく常時稼働します。\"</a>とのことです。\nまあ、Procfileやらなんやら他にもファイルを作らなければならないので、repl.itで実装した方が面倒くさくないなぁ...笑</p>\n<p>今回作成したBotですが、どなたか実用されたい方がいればどうぞ <strong><a href=\"https://discord.com/api/oauth2/authorize?client_id=725701481172303973&#x26;permissions=2112&#x26;scope=bot\">UnkoMan</a></strong> を是非よろしくお願いします。</p>\n<p>また、<code class=\"language-text\">UnkoMan最高</code>など、何かコメント・質問があれば是非お知らせください！</p>\n<h2>関連記事・参考にしたもの</h2>\n<ul>\n<li><a href=\"https://repl.it/talk/learn/Hosting-discordpy-bots-with-replit/11008\">Hosting discord.py bots on repl.it</a></li>\n<li><a href=\"https://qiita.com/1ntegrale9/items/9d570ef8175cf178468f\">Pythonで実用Discord Bot(discordpy解説)</a></li>\n<li><a href=\"https://discordpy.readthedocs.io/en/latest/discord.html\">Creating a Bot Account</a></li>\n</ul>"}},"heroImage":{"file":{"url":"//images.ctfassets.net/t1i3p2wynjf8/2aVc5tGGNCYWxktmGjEC6C/1e11c9faccf0686b9be4f4534c165cff/discord_logo_wordmark_2400.jpg"}}}},"pageContext":{"slug":"develop-discord-bot-fast"}},"staticQueryHashes":[]}