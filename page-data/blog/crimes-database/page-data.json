{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/crimes-database","result":{"data":{"contentfulBlog":{"title":"Crimes Database","description":{"description":"How we created a database of crimes for specific locations in the U.S. so that users can know in advance which part of a city is dangerous. We additionally tackle the issue on police brutality. "},"slug":"crimes-database","body":{"childMarkdownRemark":{"html":"<h2>Overview</h2>\n<p>As newcomers to a city, we never know nor have connections who can tell us which part of the city is dangerous. As international students ourselves, this was certainly a concern for us as well as our families who worry about us every day overseas. This is where we came up with the idea of making a database based on crimes in the U.S. In this application, we will be able to look for crimes related to specific locations within the U.S. to identify dangerous locations that newcomers should avoid. For each location, we will display data such as the crime rate, past crime history, and locations of police offices. In addition to these fundamental functionalities, we will extend this app to display the details of the crime as well as display the missing and wanted person to branch for help to the public. Another aspect we intend to tackle is the current issue of police brutality. Since we will have a record of the police departments as well as the police officer’s identification number with their associated charges, we hope to have a positive impact on the officers’ actions (such as them having a second thought before doing the wrong) since they will be publicly organized and displayed.</p>\n<p>We hosted the PostgreSQL database on a virtual machine on Google Cloud Platform. </p>\n<h2>ER Diagram</h2>\n<p><img src=\"//images.ctfassets.net/t1i3p2wynjf8/dhX65pTgC4v7ivUFduU5y/76aed51c01ee00f027591de24dd9ef07/Untitled_Document.png\" alt=\"crimes ER diagram\"></p>\n<h2>Data Source</h2>\n<p>For crime-related data, we will use datasets from US government websites including FBI.gov and CIA.gov. <a href=\"https://www.fbi.gov/\">https://www.fbi.gov/</a> </p>\n<p>For data relating to arrested officers we will use The Henry A. Wallace Police Crime Database. <a href=\"https://policecrime.bgsu.edu/\">https://policecrime.bgsu.edu/</a></p>\n<h2>User Interaction</h2>\n<p>When the user visits our website, the first thing we will ask for is a search term for the Location. Once we have gained the location that they are searching for, we will display another page showcasing sections for crime rate, number of homicides, where the nearest police offices are, number of police officer charges, number of missing people, and number of wanted people. If a user decides that they would want to know more about the details of a section, they are able to click on it to see on a separate page with all the specifics of the cases. </p>\n<h2>Advanced SQL Features</h2>\n<ol>\n<li>\n<p>Text</p>\n<p>A text attribute was added to the Fugitives table as a description of the fugitives. This addition of description was done to our schema because each fugitive has an associated “caution” text, which describes how heinous these individuals are and about the background information of their committed crimes. This modification is important for our project since our users will be able to gauge how dangerous a specific location may be by checking what kind of crimes are done by the fugitives who may be there. We also hope that people living in a state with fugitives do not approach these criminals casually but with caution by reading this text.</p>\n</li>\n<li>\n<p>Trigger </p>\n<p>The Trigger “check<em>loc” is meant to prevent invalid updates/insertions on the table “locations” by checking whether the state of the new location is a state in the US. Before an update/insertion happens on “locations”, the trigger “check</em>loc” loops through every row and executes the function “check<em>loc”. The function “check</em>loc” compares the state of the new location(NEW.state) with the name of every US state. If the state of the new location does not equal to any US state, an exception will raise and print “State Does Not EXIST”. This means the new location is invalid so it will not be inserted into “locations”. If the state of the new location matches with any US state, it will be inserted into “locations”. </p>\n<p>For example, if we have</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> locations <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'PA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Pittsburgh'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'11 Broadway'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'15106'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The trigger will compare ‘PA’ with all US states and finds that ‘PA’ is one of the valid state names. Then <code class=\"language-text\">(&#39;PA&#39;,&#39;Pittsburgh&#39;,NULL,&#39;11 Broadway&#39;, NULL,&#39;15106&#39;)</code> will be inserted into “locations”. </p>\n<p>However, if we have </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> locations <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'FG'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Pittsburgh'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'11 Broadway'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'15106'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The trigger will find that “FG” does not match with any US state. It will then raise the exception saying “State Does Not EXIST” and reject the insertion.</p>\n</li>\n<li>\n<p>Array</p>\n<p>An array attribute called “alias” was added to the fugitives table. This attribute is a list of text that represents aliases that a fugitive has used. Using an array data type makes sense because arrays don't have a specific length limitation. If we use another data type that has a fixed length, errors will occur when we insert a fugitive with a lot of aliese that exceed the length limitation. Having an alias array is important to our project because fugitives usually avoid using their real names. If our users want to help finding fugitives or be cautious of them, it is useful for them to know the fake names that the fugitives might use.</p>\n</li>\n</ol>\n<h2>Example SQL Queries</h2>\n<ol>\n<li>Checking for the police station’s crime history by grouping by the police station name, the crime type, and the relationship to the victim. We also count the number of occurrences of the same instance. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> P<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">.</span>crime_type<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span>relation<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> police_crimes_work_at <span class=\"token keyword\">AS</span> P<span class=\"token punctuation\">,</span> police_crime_victims <span class=\"token keyword\">AS</span> V\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> P<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">.</span>crime_type<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span>relation<span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>Given a state (eg. NJ) and a city (eg. Linden), find the locations of police stations in that city</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> P<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">.</span>address1<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">.</span>zip\n<span class=\"token keyword\">FROM</span> police_station_located_at P\n<span class=\"token keyword\">WHERE</span> P<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'NJ'</span> <span class=\"token operator\">AND</span> P<span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> <span class=\"token string\">'Linden'</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<ol start=\"3\">\n<li>Query to show the occurrence of each homicide situation in each state</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> Ha<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> Ho<span class=\"token punctuation\">.</span>situation<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> happened_at <span class=\"token keyword\">AS</span> Ha<span class=\"token punctuation\">,</span> homicides <span class=\"token keyword\">AS</span> Ho\n<span class=\"token keyword\">WHERE</span> Ha<span class=\"token punctuation\">.</span>case_id <span class=\"token operator\">=</span> Ho<span class=\"token punctuation\">.</span>case_id\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Ha<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> Ho<span class=\"token punctuation\">.</span>situation<span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>Text (Full text search) - This query computes the number of child related crimes done by fugitives in each relevant state ordered by highest to lowest number. This information could help parents to see if a new state they are moving to is safe for their children. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> R<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> number_of_child_related_crimes_by_fugitive\n<span class=\"token keyword\">FROM</span> fugitives F<span class=\"token punctuation\">,</span> recently_seen_at R\n<span class=\"token keyword\">WHERE</span> F<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id <span class=\"token operator\">AND</span> to_tsvector<span class=\"token punctuation\">(</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span> @@ to_tsquery<span class=\"token punctuation\">(</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> R<span class=\"token punctuation\">.</span>state\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> number_of_child_related_crimes_by_fugitive <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li>Array - This query shows the fugitives’ name and their recently seen location together with their alias names in a list. We also display the cardinality of the alias names because this can signify if a fugitive has a tendency to carry multiple names, which can indicate that they are constantly finding new names to call themselves, or they only have one alias name in which case may mean that they like to stick to the one name. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> F<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> cardinality<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> number_of_aliases<span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">.</span>state\n<span class=\"token keyword\">FROM</span> fugitives F<span class=\"token punctuation\">,</span> recently_seen_at R\n<span class=\"token keyword\">WHERE</span> F<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> R<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Implementation</h2>\n<h4>Frontend</h4>\n<p>The frontend was implemented with simple HTML and CSS. </p>\n<p><img src=\"//images.ctfassets.net/t1i3p2wynjf8/2Mb7jg26mmTYZxQnww1na1/d41aa67f5f16cfefe245d2f8fcd6a494/____________________________2021-01-15_22.05.40.png\" alt=\"crimes database 1\"></p>\n<p><img src=\"//images.ctfassets.net/t1i3p2wynjf8/1TOEJyeyQNIRJ3KfvmHl81/4b320d9ac63137c33cb17ba179c85ce6/____________________________2021-01-15_22.07.11.png\" alt=\"crimes database 2\"></p>\n<p><img src=\"//images.ctfassets.net/t1i3p2wynjf8/lPsRKVYOqldTUXgDQJiw5/a45b82e411727f00112ead5be064e22b/____________________________2021-01-15_22.07.34.png\" alt=\"crimes database 3\"></p>\n<h4>Backend</h4>\n<p>The backend is made with Flask.py and sqlalchemy. </p>\n<p>The database was populated using pandas and web scraping. </p>"}},"heroImage":{"file":{"url":"//images.ctfassets.net/t1i3p2wynjf8/1Ww7L9zvjxmS2kDnpt3EgL/609698a953ec36de9a5baa2321b3afb6/ezgif.com-gif-maker.gif"}}}},"pageContext":{"slug":"crimes-database"}},"staticQueryHashes":[]}