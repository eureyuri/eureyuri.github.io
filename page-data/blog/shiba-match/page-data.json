{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/shiba-match","result":{"data":{"contentfulBlog":{"title":"ShibaMatch","description":{"description":"How our team created ShibaMatch, a platform where groups can easily select a restaurant to go to."},"slug":"shiba-match","body":{"childMarkdownRemark":{"html":"<h2>Overview</h2>\n<p>ShibaMatch is a service where a group of people can easily choose a restaurant to go to that suits everyone's preferences. It uses Tinder style interaction where each participant in the group can swipe left or right or click buttons to indicate their preference on each restaurant card and can easily see which restaurants 'matched' or if none were matched then the most preferred restaurant can be selected. </p>\n<p><strong>Github</strong>: <a href=\"https://github.com/teamshiba/shiba\">https://github.com/teamshiba/shiba</a></p>\n<p><strong>Demo Video</strong>: <a href=\"https://youtu.be/N5iNKUOsj_E\">https://youtu.be/N5iNKUOsj_E</a></p>\n<h2>Motivation / The Problem</h2>\n<ul>\n<li>Sometimes a group of friends or family cannot decide which restaurant to go to.</li>\n<li>People always search through the web to check for good places that suit the group's preferences.</li>\n<li>After they find some good options for them, they need to check it with other people</li>\n<li>This is a hassle…</li>\n<li><strong>This is where ShibaMatch comes in!</strong></li>\n</ul>\n<h2>Implementation Design</h2>\n<p><img src=\"//images.ctfassets.net/t1i3p2wynjf8/OArorXCcQpIOPWTKvRYNA/42f1e25ebecb7de17be4a18b0283d8f4/____________________________2021-01-11_10.47.55.png\" alt=\"shibamatch-tech-stack\"></p>\n<ul>\n<li>\n<p>React.js for the front-end</p>\n<ul>\n<li>Compiler: TypeScript compiler (TS 3.8)</li>\n<li>Build tools: webpack</li>\n<li>Style checker: eslint</li>\n<li>Bug finder: eslint</li>\n<li>Unit testing: Jest</li>\n<li>Coverage tracking: Jest</li>\n</ul>\n</li>\n<li>\n<p>Flask.py for the back-end</p>\n<ul>\n<li>Runtime: Python 3.7 </li>\n<li>Style checker: pylint</li>\n<li>Unit testing: Pytest 6.1</li>\n<li>Coverage tracking: pytest-cov</li>\n<li>Bug finder: flake8</li>\n</ul>\n</li>\n<li>Connected using RESTful APIs</li>\n<li>Firebase used for Authentication and CloudStore</li>\n<li>Yelp  data API for retrieving restaurant information</li>\n</ul>\n<h2>UI Design</h2>\n<iframe style=\"border: 1px solid rgba(0, 0, 0, 0.1);\" width=\"800\" height=\"450\" src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2F7MHEwTsHh5G9eg7uf3FW85%2FShibaMatch%3Fnode-id%3D0%253A1\" allowfullscreen></iframe>\n<h2>Database Table Design</h2>\n<h4>Firebase CloudStore</h4>\n<p><a href=\"https://github.com/teamshiba/shiba/blob/main/docs/service-models/firebase-cloudstore.md\">https://github.com/teamshiba/shiba/blob/main/docs/service-models/firebase-cloudstore.md</a></p>\n<h2>REST API Design</h2>\n<h4>Matching Room</h4>\n<p><a href=\"https://github.com/teamshiba/shiba/blob/main/docs/service-APIs/matching-room.md\">https://github.com/teamshiba/shiba/blob/main/docs/service-APIs/matching-room.md</a></p>\n<h4>Voting &#x26; Items</h4>\n<p><a href=\"https://github.com/teamshiba/shiba/blob/main/docs/service-APIs/voting-items.md\">https://github.com/teamshiba/shiba/blob/main/docs/service-APIs/voting-items.md</a></p>\n<h2>User Stories / Acceptance Testing</h2>\n<h4>Login</h4>\n<p>As a user, I can login to the app so that I can create or join a group and start voting.\nMy conditions of satisfaction are: </p>\n<ul>\n<li>I can successfully register and login with my gmail in the login page and I will be directed to my group lists.</li>\n<li>I can register and login using my email address</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>Sample input: One user at the sign up page and sign up with Gmail.</p>\n<p>Sample output: This user would sign up successfully and would be successfully directed to the group list page.</p>\n<p><strong>Case 2</strong>:</p>\n<p>Sample input: A user enters the wrong email or password</p>\n<p>Sample output: The user is unable to login and is asked to try again</p>\n<h4>Creating a Group</h4>\n<p>As a user (organizer of a group), I want to create a new group where other users can join to vote.\nMy conditions of satisfaction are:</p>\n<ul>\n<li>I am able to create a new empty group</li>\n<li>I am able to name my group</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>Sample input: A user clicks on the create group button and inputs a name for the group.</p>\n<p>Sample output: A new group is created and is displayed in the room list. </p>\n<p><strong>Case 2</strong>:</p>\n<p>Invalid input: A user clicks on the create group button but tries to create a group without a name</p>\n<p>Sample output: The user is unable to create the group and nothing is displayed on the room list.</p>\n<h4>View Room List:</h4>\n<p>As a user, I want to be able to see a list of groups that I am currently a part of or was a part of so that I can immediately access the voting page and the voting statistics.</p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>I can find all of my joined groups as a list</li>\n<li>I can see groups that have already ended in a separate list </li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>I am able to see rooms that I have created and I have joined in a list. </p>\n<p>Sample input: The user clicks on the add group button to create a group</p>\n<p>Sample output: The created group appears in the list in the Rooms tab</p>\n<p><strong>Case 2</strong>:</p>\n<p>If the user has not joined nor created any group, then they should not be able to see any groups in the list.</p>\n<p>Simple input: The user is new.</p>\n<p>Sample output: The room list is empty and the user cannot see any groups</p>\n<h4>Invite friends/family to match</h4>\n<p>As an organizer of an event, I want to send a link to my group of friends/family so that they can join the group and vote for their preferences in my particular group.\nMy conditions of satisfaction are:</p>\n<ul>\n<li>I am able to generate a link for my specific group</li>\n<li>Other users can use this link to join my group</li>\n<li>When other attendees join my group, I should be able to see their names to identify who is currently in the group</li>\n<li>After other attendees have joined the group, they should be able to start swipingIf the person who received the invitation link is not logged in or registered, they should be redirected to a login/registration page.</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>After a user successfully creates a group, they should be able to see an invitation link created that they can copy/paste to share to other people that should join the group. After another user receives the invitation link, they should be able to click on it and be redirected to and join the group that invited them. Once the user joins the group, they should be able to immediately start swiping to indicate their preferences on the restaurants. </p>\n<p>Sample input: The organizer of the group creates a group</p>\n<p>Sample output: There will be a unique link generated and displayed in the group profile page, which other users can use to join the group.</p>\n<p><strong>Case 2</strong>:</p>\n<p>For each invitation link, no duplicate users should be able to join the same group. For example, if a user clicks on the link to join the group and successfully joins the group, then when they click on the same invitation link as the same user, they should not be able to join the group since they are already in the group.</p>\n<p>Sample input: The same user access the same invitation link multiple times</p>\n<p>Sample output: The user can only join the same group once and therefore, in the members list in the group profile page, we will only observe one instance of this user. </p>\n<p><strong>Case 3</strong>:</p>\n<p>For a person that has not registered for the app, when they open the invitation link, they should be redirected to the login/registration page. After they finish registration and successfully logged in, they can access the link again to join the group.</p>\n<p>Sample input: An unauthenticated user tries to join a group</p>\n<p>Sample output: The user is unable to join the group and is redirected to the login page. After the user is logged and accesses the URL, they are able to join the group. </p>\n<h4>Voting</h4>\n<p>As a user, I want to express my preference by a simple action (like swiping, clicking) so that I can quickly vote for all options.</p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>On the matching page (where information and images about an option is presented) on a mobile device, a user can swipe right to ‘like’ or left to ‘dislike’ it.</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>When a user enters a match room through a link, he can start voting for the options already in the room one after another. </p>\n<p>Sample input: one user clicks the link, enters the room, and swipes left. There’re more than one items in the list.</p>\n<p>Sample output: the matching page is displayed after he enters the room. After he swipes, the next item is displayed.</p>\n<p><strong>Case 2</strong>:</p>\n<p>When a user enters a match room where no items have been added to the list, he cannot vote.</p>\n<p>Sample input: one user clicks the link and before that, the host didn’t add any items to the list.</p>\n<p>Sample output: the page is empty, with only the “add new item” button in the corner, and an image telling the user to click that button to add items.</p>\n<p><strong>Case 3</strong></p>\n<p>When a user enters a match room where no items have been added to the list, he cannot vote.</p>\n<p>Invalid input: when a user enters a matching room, he swipe up.</p>\n<p>Sample output: nothing happened.</p>\n<h4>Adding my own options</h4>\n<p>As the attendee of an event, I want to also add my own choice of restaurant to the list so that if I know a restaurant that is great but is not in the list or if I don’t like any of the restaurants, I can add my own suggestions. </p>\n<h4>Consensus</h4>\n<p>As an attendee of an event, I want to know if my group has a consensus (aka. a match) so that I can see which restaurant the group wants to go to.</p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>If all members of that group have ‘liked’ the same restaurants in the list, when anyone clicks the link and enters the room again, the agreed restaurants would be displayed.</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>When all members of a group agree on the same restaurants, the system should present the matching result to every member.</p>\n<p>Sample input: 3 users in the group swipe right for the same restaurant. All attendees stay on that page after they completed their own voting process. All of them have voted for the same restaurants (let’s say “Shake Shack”).</p>\n<p>Sample output: the same page shows that matching results after the matching ends on every members’ device. The matching results are the intro of “Shake Shack”.</p>\n<p><strong>Case 2</strong>:</p>\n<p>When members of a group cannot agree on their preferences, the screen should say there are no matches.</p>\n<p>Sample input: 3 users in the group swipe right for some restaurant. All attendees stay on that page after they completed their own voting process. They voted for the different restaurants (let’s say user 1 for “Shake Shack”, user 2 for “five guys”, user 3 swipe left for both of them).</p>\n<p>Sample output: the same page shows that there were no matches. The matching results may be seen in the statistics page. </p>\n<h4>Statistics table</h4>\n<p>As an attendee of an event, I want to have a table showing how many people chose each option so that I can know about other people’s choices and select an option manually when no exact match could be made in the end. </p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>A statistics on how many people chose each option will pop up to every member of the group if the group has finished matching.</li>\n<li>The statistic could also be shown when the user clicks the “Statistics” button during matching</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>Sample Input: All group members finished swiping all the restaurants.</p>\n<p>Sample Output: The user will be prompted to click the statistics button to see the results. Restaurants that everyone agrees will be marked out.</p>\n<p><strong>Case 2</strong>:</p>\n<p>Sample Input: During a match with multiple users, one of the users click the “Statistics” button</p>\n<p>Sample Output: The user will see the correct information of how many people choose each option correctly.</p>\n<p><strong>Case 3</strong>:</p>\n<p>Sample Input: No user has voted for anything, one of the users click the “Statistics” button</p>\n<p>Sample Output: The statistic graph will show all items with counts of 0.</p>\n<h4>View Consensus in Completed Room</h4>\n<p>As a user, I want to be able to see which items reached a consensus in a completed room so that I can know where this group should go after the voting has ended. </p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>In a completed room, I am able to see an item that has reached a consensus by members in the groupI am able to swipe the item card left or right to show the next matched item</li>\n</ul>\n<p><strong>Case 1</strong>:</p>\n<p>Sample Input: All group members finished swiping and the organizer marks the group as completed. In the swiping process, all group members liked two of the items.</p>\n<p>Sample Output: In the completed room, we see the item cards for the two items. Initially we see one card but when we swipe either left or right, we can see the second matched card. </p>\n<p><strong>Case 2</strong>:</p>\n<p>Sample Input: All group members finished swiping and the organizer marks the group as completed. In the swiping process, all group members disliked all the items.</p>\n<p>Sample Output: In the completed room, no item cards will be displayed as there was no consensus reached for any item. </p>\n<h4>Edit Profile</h4>\n<p>As a user, I can go to my user profile page and see my information.My conditions of satisfaction are:When I am in the app, I can go to my user page and update my user name.</p>\n<p><strong>Case 1</strong>:</p>\n<p>When a user signs in to the app, he can go to my profile and update my information. Once he updates the info, his info will permanently change.</p>\n<p>Sample input: One user goes to the personal file page, updates the user name.</p>\n<p>Sample output: The name of the user changed in the user profile page.</p>\n<p><strong>Case 2</strong>:</p>\n<p>When a user doesn’t login, he cannot access his profile.</p>\n<p>Invalid input:  A user enters the URL for profile edit in browser without login.</p>\n<p>Sample output: The user cannot access the profile.</p>\n<h4>Logout</h4>\n<p>As a user, I can logout from the app so that the group info is no longer accessible.</p>\n<p>My conditions of satisfaction are:</p>\n<ul>\n<li>I can click the logout button on my profile page and the app is no longer accessible until I logged in again. </li>\n</ul>\n<p><strong>Case1</strong>:</p>\n<p>Sample input: One user at the user profile page and click logout button.</p>\n<p>Sample output: This user would sign out successfully and be directed to the sign up page. He can’t access shiba content until logged in.</p>\n<p>There are no invalid inputs in this case since either user presses the logout button or not.</p>\n<h2>Test Plan</h2>\n<h4>Web App (react.js)</h4>\n<h5>Voting for an item</h5>\n<p>Page for users to swipe/click a button to indicate their preference on an item. Users can swipe right, left, up, down, or click the like or dislike button.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ol>\n<li>\n<p>Direction of the card swipe to indicate preference</p>\n<ul>\n<li>Card is swiped right</li>\n<li>Card is swiped left</li>\n<li>Card is swiped up or down</li>\n</ul>\n</li>\n<li>\n<p>Clicking button to indicate preference</p>\n<ul>\n<li>Like button is clicked</li>\n<li>Dislike button is clicked</li>\n</ul>\n</li>\n</ol>\n<h5>Number of items in a group</h5>\n<p>There can be 0, less than 0, or greater than 0 number of items in the group. The boundary conditions would be -1, 0, 1.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>There are more than 0 items in the group (1 item)</li>\n<li>There are 0 items in the group</li>\n<li>There are less than 0 items in the group</li>\n</ul>\n<h5>State of the group</h5>\n<p>The group can be completed or not completed. In addition, the group may have more than 0 matches or 0 matches. The boundary condition would be 1, 0, -1 matches. </p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>Group is completed with no match</li>\n<li>Group is completed with match</li>\n<li>Group is completed with multiple matches</li>\n<li>Group is not completed with no items (newly created group)</li>\n<li>Group is not completed with no items (swiped through all items)</li>\n<li>Group is not completed with items</li>\n</ul>\n<h5>Sign Out</h5>\n<p>A logged in user can sign out</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>User is logged in</li>\n<li>User is not logged in</li>\n</ul>\n<h5>Statistics</h5>\n<p>There may be 0 or more items in a group, which we should display the statistics for. The boundary condition would therefore be -1, 0, 1 items.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>There are more than 0 items</li>\n<li>There are 0 items</li>\n<li>There are less than 0 items</li>\n</ul>\n<h5>Group member list</h5>\n<p>A group can have several members. The boundary condition would be -1, 0, 1 members in a group.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>There are more than 0 members (1 member)</li>\n<li>There is 0 or less members</li>\n</ul>\n<h5>Member management</h5>\n<p>The organizer of the group is able to appoint another member as the organizer or delete other members from the group. </p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>An organizer can manage other member’s role and delete other members</li>\n<li>A non-organizer cannot manage other members</li>\n</ul>\n<h5>Room list</h5>\n<p>A room can be in different states: active or history. </p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>Active room list</li>\n<li>History room list</li>\n<li>Creating a group</li>\n</ul>\n<h5>Invitation</h5>\n<p>When a user enters the invitation page, they can either accept or decline the invitation.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>Accept invitation</li>\n<li>Decline invitation</li>\n</ul>\n<h5>Log In</h5>\n<p>A user is able to login using their account or if they are already logged in, they can directly access the app.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>User has not logged in so needs to login to use the application</li>\n<li>User has already logged in so will be redirected to the home screen</li>\n</ul>\n<h5>Adding items to the group</h5>\n<p>When a user wants to add an item to the group, they can either choose from the recommendation list or search for it. The boundary condition here would be on the length of the search string. This means that the boundary would be -1, 0, 1. </p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>Search field is empty so should show recommended items</li>\n<li>Search field contains more than 0 characters so should show searched items</li>\n<li>Search field contains less than 0 characters</li>\n</ul>\n<h4>Service (flask.py)</h4>\n<h5>API: Create group</h5>\n<p>The API endpoint handler used to create a new matching room.</p>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The request body contains a ‘roomName’ of any string value. (valid input)</li>\n<li>The request body doesn’t contain an attribute named ‘roomName’.</li>\n<li>The request body is empty.</li>\n</ul>\n<h5>API: Join group</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The request URL contains a path parameters of existent ‘groupId’’. (valid input)</li>\n<li>The request URL does not contain a path parameter.</li>\n<li>The request URL contains a path parameters of inexistent ‘groupId’’.</li>\n<li>The user is not logged in’.</li>\n</ul>\n<h5>API: Get a list of rooms</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The query parameters include a “state” attribute, and the user is logged in. (valid input)</li>\n<li>The user is not logged in.</li>\n</ul>\n<h5>API: Get the profile</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The query parameters include a “gid” attribute and there exists a corresponding matching group. (valid input)</li>\n<li>The query parameters do include a “gid” attribute but there doesn’t exist a corresponding matching group.</li>\n<li>The query parameters does not include a “gid” attribute but there doesn’t exist a corresponding matching group.</li>\n</ul>\n<h5>API: Get items of one group</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The query parameters include a “gid” (target group ID) attribute, and the current user is a member of the target group. (valid input)</li>\n<li>The query parameters include a “gid” (target group ID) attribute, but the current user is not a member of the target group.</li>\n<li>The query parameters do come with a “gid” or “group_id” (target group ID) attribute.</li>\n</ul>\n<h5>API: Remove a user from a matching group</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The request URL contains a path parameters of existent ‘groupId’ and current user is a member of that’. (valid input)</li>\n<li>The request URL contains a path parameters of existent ‘groupId’ but current user is not a member of that.</li>\n<li>The request URL does not contain a path parameter.</li>\n</ul>\n<h5>API: Add an item to one group</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The request body contains a ‘groupId’ and an ‘item’ object. (valid input)</li>\n<li>The request body doesn’t contain an attribute named “groupId”.</li>\n<li>The request body doesn’t contain an attribute named “item”.</li>\n</ul>\n<h5>API: Put a vote</h5>\n<p><em>Equivalence partitions &#x26; boundary conditions</em></p>\n<ul>\n<li>The request body contains ‘groupId’, ‘item<em>id’, ‘type’, ‘auth</em>uid’. (valid input)</li>\n<li>The request body doesn’t contain an attribute named “groupId”.</li>\n<li>The request body doesn’t contain an attribute named “auth_uid”.</li>\n<li>The request body doesn’t contain an attribute named “item_id”.</li>\n<li>The request body doesn’t contain an attribute named “type”.</li>\n<li>The request body contains invalid “type”.</li>\n<li>Target item not in the group list.</li>\n<li>User not in the group members.</li>\n</ul>\n<h2>Branch Coverage Report</h2>\n<h4>Frontend</h4>\n<ul>\n<li>95.25% coverage of statements</li>\n<li>91.73&#x26; coverage of branches</li>\n<li>91.81% coverage of functions</li>\n<li>96.01% coverage of lines</li>\n</ul>\n<p><a href=\"https://github.com/teamshiba/shiba/tree/main/reports/frontend-coverage\">https://github.com/teamshiba/shiba/tree/main/reports/frontend-coverage</a></p>\n<h4>Backend</h4>\n<ul>\n<li>91% coverage</li>\n</ul>\n<p><a href=\"https://github.com/teamshiba/shiba/blob/main/reports/backend-coverage\">https://github.com/teamshiba/shiba/blob/main/reports/backend-coverage</a></p>\n<h2>Continuous Integration</h2>\n<p>We used Github action to configure our CI</p>\n<h4>Configuration</h4>\n<p><a href=\"https://github.com/teamshiba/shiba/tree/main/.github/workflows\">https://github.com/teamshiba/shiba/tree/main/.github/workflows</a></p>\n<h4>Reports</h4>\n<p><a href=\"https://github.com/teamshiba/shiba/actions\">https://github.com/teamshiba/shiba/actions</a></p>"}},"heroImage":{"file":{"url":"//images.ctfassets.net/t1i3p2wynjf8/2ITeLtAWAUIYbTAQrIPcOJ/1a1367414c015da1b091f64f234832fe/ezgif.com-gif-maker.gif"}}}},"pageContext":{"slug":"shiba-match"}},"staticQueryHashes":[]}